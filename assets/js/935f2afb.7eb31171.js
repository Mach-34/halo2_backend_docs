"use strict";(self.webpackChunkhalo_2_backend_docs=self.webpackChunkhalo_2_backend_docs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"defaultSidebar":[{"type":"link","label":"Introduction","href":"/halo2_backend_docs/","docId":"intro"},{"type":"link","label":"Getting Started","href":"/halo2_backend_docs/getting_started","docId":"getting_started"},{"type":"link","label":"ACIR OpCodes","href":"/halo2_backend_docs/acir","docId":"acir"},{"type":"link","label":"ACVM Backends","href":"/halo2_backend_docs/acvm","docId":"acvm"},{"type":"link","label":"Trusted Setup (CRS)","href":"/halo2_backend_docs/crs","docId":"crs"},{"type":"link","label":"Translating Noir to Halo2","href":"/halo2_backend_docs/contraints","docId":"contraints"},{"type":"link","label":"Proving and Verifying (Proof System)","href":"/halo2_backend_docs/proof_system","docId":"proof_system"},{"type":"link","label":"EVM Verification","href":"/halo2_backend_docs/evm","docId":"evm"},{"type":"link","label":"Testing","href":"/halo2_backend_docs/testing","docId":"testing"}]},"docs":{"acir":{"id":"acir","title":"ACIR OpCodes","description":"The Aztec Noir DSL provides an intuitive, rust-like language that is saved to .nr files. Noir circuits are meant to emulate traditional code as closely as possible. Under the hood, however, .nr files are translated into an intermediate representation (IR) called the ACIR (abstract circuit intermediate representation). The IR provides all the necessary information to generate a constraint system in any language.","sidebar":"defaultSidebar"},"acvm":{"id":"acvm","title":"ACVM Backends","description":"An ACVM Backend API is comprised of a few parts, as can be seen in halo2backend\'s acvminterop:","sidebar":"defaultSidebar"},"contraints":{"id":"contraints","title":"Translating Noir to Halo2","description":"The prevailing functionality of any ACVM backend is translating the ACIR provided by Noir into the corresponding circuit. In the case of the Halo2 backend, this is handled by circuittranslator.rs. The NoirHalo2Translator is a Halo2 circuit object that uses the ACIR to programmatically synthesize constraints.","sidebar":"defaultSidebar"},"crs":{"id":"crs","title":"Trusted Setup (CRS)","description":"A \\"Common Reference String\\" (CRS), alternatively known as a \\"Structured Reference String\\" (SRS), is the artifact from a trusted setup (\\"Powers of Tau\\") ceremony needed from most ZKP proving systems. In Halo2\'s vanilla (Zcash) version using IPA, there is no CRS. However, the Halo2 Backend for Aztec Noir uses the KZG commitment scheme which does use a CRS. Thus, our proving system needs to manage a CRS.","sidebar":"defaultSidebar"},"evm":{"id":"evm","title":"EVM Verification","description":"WARNING: Halo2 Verifier Contracts MUST be compiled with solc version 0.8.19 or earlier. Failure to do so will result in an OpcodeNotFound when trying to deploy the contract. See related issue for explanation.","sidebar":"defaultSidebar"},"getting_started":{"id":"getting_started","title":"Getting Started","description":"As of now, the Halo2 Backend is not shipped to the production Nargo CLI. To use it, you\'ll need to manually build the command line.","sidebar":"defaultSidebar"},"intro":{"id":"intro","title":"Introduction","description":"These docs serve two purposes:","sidebar":"defaultSidebar"},"proof_system":{"id":"proof_system","title":"Proving and Verifying (Proof System)","description":"Todo: Using the core ACVM backend API","sidebar":"defaultSidebar"},"testing":{"id":"testing","title":"Testing","description":"The Halo2 Backend ships with comprehensive testing of the included functionality. This comes in three forms:","sidebar":"defaultSidebar"}}}')}}]);